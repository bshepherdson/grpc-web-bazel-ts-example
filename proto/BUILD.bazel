load(":ts_grpc_proto_library.bzl", "ts_grpc_proto_library", "ts_grpc_web_proto_library")
load("@io_bazel_rules_go//go:def.bzl", "go_library")
load("@io_bazel_rules_go//proto:def.bzl", "go_proto_library")
load("@npm_bazel_labs//:index.bzl", "ts_proto_library")
load("@rules_proto//proto:defs.bzl", "proto_library")

###############
# API Flavour #
###############
proto_library(
    name = "greeter_proto",
    srcs = ["greeter.proto"],
    visibility = ["//web:__pkg__"],
)

ts_grpc_proto_library(
    name = "greeter_ts_proto",
    proto = "greeter.proto",
    visibility = ["//visibility:public"],
)

#ts_grpc_web_proto_library(
#    name = "greeter_proto_web_ts",
#    proto = "greeter.proto",
#    visibility = ["//visibility:public"],
#)


# This is grpc-web-only and conflicts with the files above.
#ts_proto_library(
#    name = "greeter_ts_proto",
#    proto = ":greeter_proto",
#    visibility = ["//api:__subpackages__"],
#)

###############
# Web Flavour #
###############

# Hack: Copying the file from foo.proto to foo_web.proto to avoid the naming
# collision.
genrule(
    name = "greeter_copy",
    srcs = ["greeter.proto"],
    outs = ["greeter_web.proto"],
    cmd = "cp $< $(@)",
)

proto_library(
    name = "greeter_web_proto",
    srcs = [":greeter_copy"],
)

ts_proto_library(
    name = "greeter_web_ts_proto",
    proto = ":greeter_web_proto",
    visibility = ["//web:__subpackages__"],
)


# Defunct Go things
#load("@npm_bazel_typescript//:index.bzl", "ts_library")
#go_proto_library(
#    name = "greeter_go_proto",
#    compilers = ["@io_bazel_rules_go//proto:gogo_grpc"],
#    importpath = "github.com/shepheb/grpc-web-bazel-ts-example/proto/greeter",
#    proto = ":greeter_proto",
#    visibility = ["//visibility:public"],
#)
#
#go_library(
#    name = "go_default_library",
#    embed = [":greeter_go_proto"],
#    importpath = "github.com/shepheb/grpc-web-bazel-ts-example/proto/greeter",
#    visibility = ["//visibility:public"],
#)
